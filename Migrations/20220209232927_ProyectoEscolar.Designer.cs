// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Proyectoagua.Data.Interface;

namespace Proyectoagua.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220209232927_ProyectoEscolar")]
    partial class ProyectoEscolar
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Proyectoagua.Models.BlogEmpresa", b =>
                {
                    b.Property<int>("Id_BlogEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("EmpresasId_Empresa")
                        .HasColumnType("int");

                    b.Property<int>("Id_Medidor_fk_E")
                        .HasColumnType("int");

                    b.Property<int>("Id_empresa")
                        .HasColumnType("int");

                    b.Property<int?>("MedidoresId_Medidor")
                        .HasColumnType("int");

                    b.Property<string>("Opinion_E")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion_E")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlFoto_E")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Uso_Agua_E")
                        .HasColumnType("float");

                    b.HasKey("Id_BlogEmpresa");

                    b.HasIndex("EmpresasId_Empresa");

                    b.HasIndex("MedidoresId_Medidor");

                    b.ToTable("BlogEmpresas");
                });

            modelBuilder.Entity("Proyectoagua.Models.Blogs", b =>
                {
                    b.Property<int>("Id_Blog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("EmpresasId_Empresa")
                        .HasColumnType("int");

                    b.Property<int>("Id_Medidor_fk")
                        .HasColumnType("int");

                    b.Property<int>("Id_usuario")
                        .HasColumnType("int");

                    b.Property<int?>("MedidoresId_Medidor")
                        .HasColumnType("int");

                    b.Property<string>("Opinion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlFoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Uso_Agua")
                        .HasColumnType("float");

                    b.Property<int?>("UsuariosId_us")
                        .HasColumnType("int");

                    b.HasKey("Id_Blog");

                    b.HasIndex("EmpresasId_Empresa");

                    b.HasIndex("MedidoresId_Medidor");

                    b.HasIndex("UsuariosId_us");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("Proyectoagua.Models.Empresas", b =>
                {
                    b.Property<int>("Id_Empresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Contasenia_E")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo_E")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha_Regristro")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Medidor_E")
                        .HasColumnType("int");

                    b.Property<int?>("MedidoresId_Medidor")
                        .HasColumnType("int");

                    b.Property<string>("Nombre_E")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rfc")
                        .HasColumnType("int");

                    b.Property<string>("Ubicacion_E")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Empresa");

                    b.HasIndex("MedidoresId_Medidor");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("Proyectoagua.Models.Medidores", b =>
                {
                    b.Property<int>("Id_Medidor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Marca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Proveedor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Medidor");

                    b.ToTable("Medidores");
                });

            modelBuilder.Entity("Proyectoagua.Models.Usuario", b =>
                {
                    b.Property<int>("Id_us")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Contrasenia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id_Medidor")
                        .HasColumnType("int");

                    b.Property<int?>("MedidoresId_Medidor")
                        .HasColumnType("int");

                    b.Property<DateTime>("Nacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("domicilio")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_us");

                    b.HasIndex("MedidoresId_Medidor");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Proyectoagua.Models.BlogEmpresa", b =>
                {
                    b.HasOne("Proyectoagua.Models.Empresas", "Empresas")
                        .WithMany()
                        .HasForeignKey("EmpresasId_Empresa");

                    b.HasOne("Proyectoagua.Models.Medidores", "Medidores")
                        .WithMany()
                        .HasForeignKey("MedidoresId_Medidor");

                    b.Navigation("Empresas");

                    b.Navigation("Medidores");
                });

            modelBuilder.Entity("Proyectoagua.Models.Blogs", b =>
                {
                    b.HasOne("Proyectoagua.Models.Empresas", null)
                        .WithMany("Blogs")
                        .HasForeignKey("EmpresasId_Empresa");

                    b.HasOne("Proyectoagua.Models.Medidores", "Medidores")
                        .WithMany("Blogs")
                        .HasForeignKey("MedidoresId_Medidor");

                    b.HasOne("Proyectoagua.Models.Usuario", "Usuarios")
                        .WithMany("Blogs")
                        .HasForeignKey("UsuariosId_us");

                    b.Navigation("Medidores");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Proyectoagua.Models.Empresas", b =>
                {
                    b.HasOne("Proyectoagua.Models.Medidores", "Medidores")
                        .WithMany("Empresas")
                        .HasForeignKey("MedidoresId_Medidor");

                    b.Navigation("Medidores");
                });

            modelBuilder.Entity("Proyectoagua.Models.Usuario", b =>
                {
                    b.HasOne("Proyectoagua.Models.Medidores", "Medidores")
                        .WithMany("Usuarios")
                        .HasForeignKey("MedidoresId_Medidor");

                    b.Navigation("Medidores");
                });

            modelBuilder.Entity("Proyectoagua.Models.Empresas", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("Proyectoagua.Models.Medidores", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Empresas");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Proyectoagua.Models.Usuario", b =>
                {
                    b.Navigation("Blogs");
                });
#pragma warning restore 612, 618
        }
    }
}
